#include <IRsend.h>
#include <BlynkSimpleEsp8266.h>
#include <ESP8266WiFi.h>


// WiFi credentials
const char* WIFI_NAME     = "Lyapov";
const char* WIFI_PASSWORD = "-";


// Blynk credentials
const char* BLYNK_AUTH = "-";

// Blynk pins
const int BLYNK_AC_BUTTON_ON_OFF        = V8;
const int BLYNK_AC_SLIDER_TEMP          = V9;
const int BLYNK_TV_BUTTON_SWITCH_POWER  = V12;
const int BLYNK_TV_BUTTON_SWITCH_SOURCE = V13;


// AC Controls
const int BLYNK_PARAM_VALUE_AC_POWER_ON             = 0;
const int BLYNK_PARAM_VALUE_AC_POWER_OFF            = 1;
const int BLYNK_PARAM_VALUE_AC_TEMP_UP              = 2;
const int BLYNK_PARAM_VALUE_AC_TEMP_DOWN            = 3;

// TV Setup
const int BLYNK_PARAM_VALUE_TV_POWER                = 4;
const int BLYNK_PARAM_VALUE_TV_SOURCE               = 5;
const int BLYNK_PARAM_VALUE_TV_VOLUME_UP            = 6;
const int BLYNK_PARAM_VALUE_TV_VOLUME_DOWN          = 7;

// TV Programs
const int BLYNK_PARAM_VALUE_TV_BTV                  = 8;
const int BLYNK_PARAM_VALUE_TV_NOVA                 = 9;
const int BLYNK_PARAM_VALUE_TV_CITY                 = 10;
const int BLYNK_PARAM_VALUE_TV_THE_VOICE            = 11;
const int BLYNK_PARAM_VALUE_TV_DISCOVERY            = 12;
const int BLYNK_PARAM_VALUE_TV_BTV_COMEDY           = 13;
const int BLYNK_PARAM_VALUE_TV_NATIONAL_GEOGRAPHIC  = 14;

// Light
const int BLYNK_PARAM_VALUE_LIGHT_TURN_ON           = 15;
const int BLYNK_PARAM_VALUE_LIGHT_TURN_OFF          = 16;
const int BLYNK_PARAM_VALUE_LIGHT_LESS              = 17;
const int BLYNK_PARAM_VALUE_LIGHT_MORE              = 18;
const int BLYNK_PARAM_VALUE_LIGHT_WHITE             = 19;
const int BLYNK_PARAM_VALUE_LIGHT_BLUE              = 20;
const int BLYNK_PARAM_VALUE_LIGHT_GREEN             = 21;
const int BLYNK_PARAM_VALUE_LIGHT_RED               = 22;


// IR Signals
uint16_t acPowerON[231] = {2924, 9100,  412, 634,  436, 1626,  412, 634,  434, 608,  438, 608,  436, 610,  434, 636,  410, 634,  436, 608,  438, 1626,  410, 634,  436, 636,  436, 1646,  416, 610,  436, 660,  436, 1620,  418, 1646,  416, 1626,  436, 1622,  468, 1626,  410, 636,  436, 608,  488, 588,  432, 634,  436, 610,  436, 634,  438, 608,  436, 608,  436, 612,  432, 626,  446, 606,  436, 608,  436, 612,  434, 634,  436, 608,  436, 608,  436, 610,  434, 634,  410, 634,  436, 608,  436, 608,  436, 610,  434, 634,  434, 610,  436, 610,  436, 610,  434, 632,  436, 610,  436, 608,  436, 608,  436, 614,  430, 636,  436, 1622,  414, 1648,  416, 1626,  438, 1646,  364, 2070,  2874, 9124,  436, 1624,  418, 608,  436, 658,  436, 608,  436, 608,  436, 614,  432, 632,  436, 608,  436, 608,  436, 1626,  438, 608,  436, 660,  436, 1622,  416, 608,  436, 660,  436, 632,  436, 1622,  416, 1646,  418, 1646,  414, 1604,  436, 1646,  418, 1624,  414, 1646,  470, 1626,  434, 1622,  418, 612,  434, 632,  436, 608,  436, 608,  438, 606,  436, 616,  428, 634,  436, 608,  446, 600,  438, 612,  432, 634,  434, 610,  438, 606,  438, 608,  436, 1646,  418, 1626,  436, 610,  486, 584,  438, 612,  432, 634,  438, 632,  436, 1622,  416, 660,  434, 610,  460, 584,  458, 590,  434, 634,  436, 1622,  418, 1644,  416, 1624,  440, 1622,  390};
uint16_t acPowerOFF[347] = {2954, 9092,  442, 602,  468, 1594,  442, 602,  416, 628,  468, 576,  470, 576,  466, 604,  442, 602,  468, 578,  468, 1618,  416, 606,  470, 574,  468, 1596,  494, 1596,  414, 630,  468, 1594,  416, 1644,  448, 1594,  468, 1626,  464, 1598,  466, 576,  470, 574,  470, 602,  444, 600,  470, 576,  494, 578,  492, 578,  492, 576,  494, 602,  468, 580,  492, 574,  496, 600,  468, 602,  470, 576,  494, 600,  470, 600,  468, 580,  492, 576,  492, 604,  440, 630,  442, 606,  464, 630,  442, 628,  460, 610,  466, 606,  466, 604,  468, 602,  486, 584,  494, 576,  496, 574,  496, 576,  496, 574,  496, 574,  496, 576,  496, 1594,  438, 1674,  392, 1360,  2900, 9144,  446, 1594,  444, 602,  440, 602,  468, 576,  468, 578,  466, 602,  416, 630,  468, 576,  470, 578,  466, 1616,  446, 576,  468, 580,  464, 602,  416, 628,  468, 576,  468, 1644,  446, 1618,  406, 1610,  468, 1596,  492, 1596,  468, 604,  442, 602,  440, 604,  468, 576,  468, 580,  464, 602,  438, 606,  468, 578,  492, 576,  494, 576,  494, 576,  494, 578,  494, 576,  494, 576,  494, 576,  494, 576,  494, 576,  494, 578,  492, 1594,  416, 1624,  466, 582,  462, 602,  414, 630,  470, 576,  468, 1618,  442, 1576,  466, 602,  442, 602,  470, 576,  468, 1596,  438, 606,  466, 576,  468, 578,  468, 602,  416, 628,  466, 580,  388, 1830,  2898, 9144,  446, 1650,  438, 630,  468, 602,  466, 604,  414, 654,  470, 602,  468, 602,  440, 630,  468, 602,  468, 1616,  390, 632,  468, 576,  468, 1616,  444, 1618,  446, 604,  466, 604,  468, 1616,  446, 1596,  440, 1620,  444, 1624,  468, 1618,  414, 1600,  466, 1598,  466, 1646,  444, 1576,  464, 604,  414, 628,  468, 576,  468, 576,  470, 602,  468, 578,  492, 604,  468, 602,  468, 582,  462, 606,  464, 630,  440, 630,  440, 608,  486, 608,  492, 1572,  466, 1598,  440, 606,  468, 576,  468, 604,  442, 604,  414, 630,  468, 1596,  466, 604,  466, 602,  442, 630,  468, 604,  468, 602,  464, 608,  466, 604,  466, 1596,  468, 1594,  416};
uint16_t acTempDown[231] = {2924, 9118,  444, 574,  470, 1592,  470, 574,  470, 576,  492, 574,  470, 578,  466, 600,  466, 578,  470, 574,  472, 1592,  414, 628,  472, 600,  472, 1570,  466, 600,  416, 626,  472, 1592,  442, 1598,  470, 1594,  470, 1642,  446, 1590,  474, 574,  470, 574,  470, 598,  446, 600,  468, 576,  472, 574,  472, 596,  498, 574,  470, 574,  470, 576,  470, 598,  418, 628,  472, 572,  470, 574,  470, 598,  446, 600,  416, 628,  470, 600,  466, 578,  470, 574,  470, 598,  446, 600,  440, 604,  470, 574,  470, 650,  446, 600,  444, 600,  416, 630,  474, 570,  470, 576,  470, 600,  440, 654,  468, 1570,  470, 1592,  472, 1592,  416, 1624,  438, 1532,  2930, 9096,  468, 1570,  468, 600,  414, 630,  472, 572,  472, 574,  470, 598,  446, 598,  440, 606,  470, 574,  472, 1594,  440, 604,  470, 598,  468, 1596,  472, 1594,  470, 1590,  448, 1592,  470, 574,  470, 1592,  470, 1590,  416, 1624,  470, 1594,  468, 1646,  446, 1594,  470, 1592,  446, 1594,  472, 574,  468, 598,  444, 600,  444, 626,  468, 578,  470, 574,  470, 574,  470, 596,  448, 598,  440, 656,  470, 574,  470, 1592,  442, 1596,  468, 1594,  468, 574,  470, 1592,  442, 602,  470, 576,  470, 598,  446, 650,  418, 628,  470, 1570,  466, 600,  416, 680,  416, 626,  474, 572,  470, 578,  466, 1646,  470, 1572,  466, 1594,  470, 1592,  418};uint16_t rawData[231] = {2924, 9118,  444, 574,  470, 1592,  470, 574,  470, 576,  492, 574,  470, 578,  466, 600,  466, 578,  470, 574,  472, 1592,  414, 628,  472, 600,  472, 1570,  466, 600,  416, 626,  472, 1592,  442, 1598,  470, 1594,  470, 1642,  446, 1590,  474, 574,  470, 574,  470, 598,  446, 600,  468, 576,  472, 574,  472, 596,  498, 574,  470, 574,  470, 576,  470, 598,  418, 628,  472, 572,  470, 574,  470, 598,  446, 600,  416, 628,  470, 600,  466, 578,  470, 574,  470, 598,  446, 600,  440, 604,  470, 574,  470, 650,  446, 600,  444, 600,  416, 630,  474, 570,  470, 576,  470, 600,  440, 654,  468, 1570,  470, 1592,  472, 1592,  416, 1624,  438, 1532,  2930, 9096,  468, 1570,  468, 600,  414, 630,  472, 572,  472, 574,  470, 598,  446, 598,  440, 606,  470, 574,  472, 1594,  440, 604,  470, 598,  468, 1596,  472, 1594,  470, 1590,  448, 1592,  470, 574,  470, 1592,  470, 1590,  416, 1624,  470, 1594,  468, 1646,  446, 1594,  470, 1592,  446, 1594,  472, 574,  468, 598,  444, 600,  444, 626,  468, 578,  470, 574,  470, 574,  470, 596,  448, 598,  440, 656,  470, 574,  470, 1592,  442, 1596,  468, 1594,  468, 574,  470, 1592,  442, 602,  470, 576,  470, 598,  446, 650,  418, 628,  470, 1570,  466, 600,  416, 680,  416, 626,  474, 572,  470, 578,  466, 1646,  470, 1572,  466, 1594,  470, 1592,  418};
uint16_t acTempUp[231] = {2952, 9072,  468, 598,  416, 1624,  470, 576,  522, 572,  468, 578,  470, 578,  464, 600,  444, 600,  440, 604,  470, 1594,  416, 628,  470, 574,  472, 1592,  416, 630,  470, 598,  442, 1620,  472, 1592,  438, 1598,  472, 1594,  470, 1590,  446, 598,  444, 600,  476, 572,  470, 576,  470, 598,  418, 626,  474, 516,  526, 576,  468, 626,  470, 574,  472, 574,  470, 578,  466, 600,  438, 602,  474, 572,  472, 598,  472, 574,  470, 578,  466, 600,  442, 602,  470, 572,  472, 578,  466, 624,  446, 598,  446, 600,  440, 604,  472, 572,  470, 578,  468, 598,  446, 626,  470, 574,  470, 598,  418, 1622,  472, 1592,  470, 1572,  466, 1592,  470, 1422,  2926, 9094,  468, 1570,  468, 600,  446, 600,  442, 604,  470, 574,  472, 596,  446, 600,  416, 628,  472, 572,  472, 1594,  440, 604,  472, 624,  418, 1620,  472, 574,  472, 624,  442, 602,  470, 1592,  438, 1600,  468, 1618,  418, 1620,  472, 1592,  472, 1592,  446, 1592,  524, 1590,  446, 1592,  472, 572,  472, 598,  418, 628,  468, 576,  472, 572,  472, 576,  468, 598,  416, 628,  474, 572,  470, 576,  468, 598,  450, 596,  470, 574,  472, 578,  786, 1298,  446, 1592,  444, 600,  496, 574,  472, 598,  446, 600,  416, 628,  470, 1592,  418, 678,  418, 626,  472, 572,  472, 572,  472, 578,  438, 1622,  472, 1592,  470, 1570,  440, 1620,  418};
uint16_t tvSwitchPower[135] = {4468, 4556,  502, 1738,  504, 1738,  502, 1738,  502, 598,  522, 596,  524, 596,  524, 596,  524, 596,  524, 1738,  504, 1738,  504, 1738,  502, 598,  524, 596,  524, 598,  524, 596,  524, 596,  524, 596,  524, 1738,  504, 596,  524, 596,  524, 596,  524, 596,  524, 596,  524, 596,  524, 1738,  502, 598,  524, 1738,  504, 1738,  502, 1738,  504, 1738,  504, 1736,  504, 1738,  504, 46894,  4466, 4538,  522, 1738,  504, 1738,  502, 1740,  504, 596,  524, 596,  524, 598,  522, 598,  522, 598,  524, 1736,  502, 1738,  502, 1738,  504, 596,  524, 596,  522, 598,  524, 596,  524, 598,  524, 596,  522, 1738,  502, 598,  524, 598,  524, 596,  524, 596,  524, 598,  524, 596,  524, 1738,  504, 596,  524, 1736,  502, 1738,  502, 1738,  502, 1738,  504, 1736,  504, 1738,  502};  // SAMSUNG E0E040BF
uint16_t tvSwitchSource[135] = {610, 8374,  556, 1714,  536, 1712,  536, 1714,  536, 574,  558, 574,  556, 574,  556, 576,  556, 544,  556, 1692,  556, 1712,  536, 1712,  536, 576,  556, 574,  558, 574,  504, 598,  558, 574,  556, 1714,  538, 572,  558, 574,  556, 574,  558, 574,  506, 594,  556, 578,  556, 574,  560, 572,  504, 1712,  556, 1692,  556, 1692,  558, 1714,  534, 1690,  504, 1716,  554, 1692,  556, 46846,  4466, 4498,  554, 1692,  556, 1694,  554, 1692,  504, 596,  554, 576,  558, 576,  556, 574,  504, 598,  556, 1692,  556, 1694,  504, 1714,  554, 574,  556, 576,  506, 596,  556, 574,  556, 576,  556, 1692,  554, 574,  558, 576,  556, 582,  550, 574,  504, 596,  558, 574,  556, 576,  556, 574,  504, 1714,  556, 1692,  556, 1692,  554, 1694,  556, 1716,  534, 1690,  556, 1696,  554};
uint16_t tvNova[71] = {8896, 4548,  524, 1716,  502, 602,  544, 578,  520, 604,  544, 1716,  526, 578,  546, 576,  546, 578,  548, 574,  548, 1714,  526, 1722,  526, 1710,  532, 578,  518, 1748,  526, 1718,  498, 1742,  500, 608,  542, 580,  520, 1742,  498, 1750,  524, 578,  544, 580,  518, 1742,  526, 1718,  522, 1718,  500, 1752,  526, 576,  518, 604,  518, 1744,  528, 1714,  508, 594,  542, 582,  520, 39838,  8894, 2314,  500};  // NEC 887733CC
uint16_t tvBTVComedy[71] = {8924, 4508,  550, 1712,  530, 572,  550, 572,  548, 574,  550, 1694,  548, 572,  550, 572,  550, 572,  550, 572,  550, 1694,  548, 1698,  548, 1694,  548, 572,  550, 1698,  550, 1714,  528, 1694,  548, 1694,  548, 1714,  528, 1728,  530, 1714,  528, 572,  550, 572,  550, 576,  548, 1714,  530, 572,  552, 568,  524, 602,  550, 570,  550, 1712,  528, 1720,  500, 1742,  528, 576,  546, 39816,  8920, 2288,  500};  // NEC 8877F10E
uint16_t tvCity1[71] = {8950, 4494,  548, 1694,  554, 566,  526, 594,  554, 570,  554, 1692,  554, 566,  556, 568,  548, 572,  554, 570,  552, 1690,  556, 1694,  550, 1690,  578, 544,  552, 1686,  508, 1738,  526, 1716,  552, 1694,  552, 1686,  554, 566,  552, 580,  556, 1686,  552, 568,  552, 572,  550, 1690,  552, 570,  556, 570,  554, 1694,  552, 1690,  554, 568,  554, 1692,  556, 1686,  552, 572,  556, 39776,  8950, 2262,  554};  // NEC 8877C936
uint16_t tvCity2[71] = {8942, 4500,  548, 1692,  550, 572,  548, 572,  550, 574,  550, 1692,  548, 574,  548, 574,  548, 574,  550, 572,  550, 1692,  548, 1700,  548, 1694,  548, 574,  548, 1722,  526, 1694,  548, 1694,  548, 1692,  548, 1692,  550, 1708,  550, 572,  548, 572,  552, 570,  550, 572,  550, 1692,  550, 572,  548, 572,  550, 572,  550, 1694,  546, 1696,  548, 1704,  548, 1696,  548, 572,  548, 39788,  8944, 2264,  546};  // NEC 8877E11E
uint16_t tvCity3[71] = {8942, 4500,  548, 1692,  550, 572,  548, 572,  550, 574,  550, 1692,  548, 574,  548, 574,  548, 574,  550, 572,  550, 1692,  548, 1700,  548, 1694,  548, 574,  548, 1722,  526, 1694,  548, 1694,  548, 1692,  548, 1692,  550, 1708,  550, 572,  548, 572,  552, 570,  550, 572,  550, 1692,  550, 572,  548, 572,  550, 572,  550, 1694,  546, 1696,  548, 1704,  548, 1696,  548, 572,  548, 39788,  8944, 2264,  546};  // NEC 8877E11E
uint16_t tvBTV[71] = {8950, 4494,  548, 1694,  554, 566,  526, 594,  554, 570,  554, 1692,  554, 566,  556, 568,  548, 572,  554, 570,  552, 1690,  556, 1694,  550, 1690,  578, 544,  552, 1686,  508, 1738,  526, 1716,  552, 1694,  552, 1686,  554, 566,  552, 580,  556, 1686,  552, 568,  552, 572,  550, 1690,  552, 570,  556, 570,  554, 1694,  552, 1690,  554, 568,  554, 1692,  556, 1686,  552, 572,  556, 39776,  8950, 2262,  554};  // NEC 8877C936
uint16_t tvTheVoice1[71] = {8950, 4494,  548, 1694,  554, 566,  526, 594,  554, 570,  554, 1692,  554, 566,  556, 568,  548, 572,  554, 570,  552, 1690,  556, 1694,  550, 1690,  578, 544,  552, 1686,  508, 1738,  526, 1716,  552, 1694,  552, 1686,  554, 566,  552, 580,  556, 1686,  552, 568,  552, 572,  550, 1690,  552, 570,  556, 570,  554, 1694,  552, 1690,  554, 568,  554, 1692,  556, 1686,  552, 572,  556, 39776,  8950, 2262,  554};  // NEC 8877C936
uint16_t tvTheVoice2[71] = {8942, 4500,  548, 1692,  550, 572,  548, 572,  550, 574,  550, 1692,  548, 574,  548, 574,  548, 574,  550, 572,  550, 1692,  548, 1700,  548, 1694,  548, 574,  548, 1722,  526, 1694,  548, 1694,  548, 1692,  548, 1692,  550, 1708,  550, 572,  548, 572,  552, 570,  550, 572,  550, 1692,  550, 572,  548, 572,  550, 572,  550, 1694,  546, 1696,  548, 1704,  548, 1696,  548, 572,  548, 39788,  8944, 2264,  546};  // NEC 8877E11E
uint16_t tvTheVoice3[71] = {8942, 4490,  548, 1694,  546, 572,  550, 572,  550, 574,  550, 1694,  548, 572,  550, 572,  550, 574,  548, 574,  550, 1690,  550, 1700,  546, 1694,  550, 572,  550, 1696,  550, 1694,  546, 1694,  550, 576,  550, 1692,  548, 574,  550, 572,  550, 1694,  548, 572,  550, 574,  548, 1700,  546, 1694,  548, 574,  550, 1696,  548, 1694,  550, 572,  550, 1698,  550, 1692,  550, 572,  550, 39782,  8942, 2266,  548};  // NEC 887749B6
uint16_t tvDiscovery1[71] = {8950, 4494,  548, 1694,  554, 566,  526, 594,  554, 570,  554, 1692,  554, 566,  556, 568,  548, 572,  554, 570,  552, 1690,  556, 1694,  550, 1690,  578, 544,  552, 1686,  508, 1738,  526, 1716,  552, 1694,  552, 1686,  554, 566,  552, 580,  556, 1686,  552, 568,  552, 572,  550, 1690,  552, 570,  556, 570,  554, 1694,  552, 1690,  554, 568,  554, 1692,  556, 1686,  552, 572,  556, 39776,  8950, 2262,  554};  // NEC 8877C936
uint16_t tvDiscovery2[67] = {8942, 4502,  548, 1692,  550, 572,  550, 572,  550, 574,  550, 1694,  548, 574,  548, 572,  550, 574,  550, 572,  550, 1692,  548, 1698,  548, 1696,  546, 574,  548, 1700,  546, 1696,  550, 1692,  548, 578,  550, 572,  550, 1694,  546, 1700,  548, 572,  552, 570,  550, 1694,  548, 1694,  544, 1692,  550, 1706,  548, 572,  548, 572,  550, 1694,  546, 1694,  548, 572,  548, 576,  550};  // NEC 887733CC
uint16_t tvDiscovery3[67] = {8942, 4502,  548, 1692,  550, 572,  550, 572,  550, 574,  550, 1694,  548, 574,  548, 572,  550, 574,  550, 572,  550, 1692,  548, 1698,  548, 1696,  546, 574,  548, 1700,  546, 1696,  550, 1692,  548, 578,  550, 572,  550, 1694,  546, 1700,  548, 572,  552, 570,  550, 1694,  548, 1694,  544, 1692,  550, 1706,  548, 572,  548, 572,  550, 1694,  546, 1694,  548, 572,  548, 576,  550};  // NEC 887733CC
uint16_t tvNationalGeographic1[71] = {8950, 4494,  548, 1694,  554, 566,  526, 594,  554, 570,  554, 1692,  554, 566,  556, 568,  548, 572,  554, 570,  552, 1690,  556, 1694,  550, 1690,  578, 544,  552, 1686,  508, 1738,  526, 1716,  552, 1694,  552, 1686,  554, 566,  552, 580,  556, 1686,  552, 568,  552, 572,  550, 1690,  552, 570,  556, 570,  554, 1694,  552, 1690,  554, 568,  554, 1692,  556, 1686,  552, 572,  556, 39776,  8950, 2262,  554};  // NEC 8877C936
uint16_t tvNationalGeographic2[67] = {8942, 4502,  548, 1692,  550, 572,  550, 572,  550, 574,  550, 1694,  548, 574,  548, 572,  550, 574,  550, 572,  550, 1692,  548, 1698,  548, 1696,  546, 574,  548, 1700,  546, 1696,  550, 1692,  548, 578,  550, 572,  550, 1694,  546, 1700,  548, 572,  552, 570,  550, 1694,  548, 1694,  544, 1692,  550, 1706,  548, 572,  548, 572,  550, 1694,  546, 1694,  548, 572,  548, 576,  550};  // NEC 887733CC
uint16_t tvNationalGeographic3[71] = {8942, 4498,  552, 1692,  550, 572,  548, 574,  548, 574,  548, 1690,  552, 574,  550, 572,  550, 576,  552, 568,  550, 1716,  524, 1700,  548, 1696,  546, 574,  550, 1700,  548, 1692,  550, 1716,  526, 578,  548, 1694,  548, 1694,  548, 1690,  550, 572,  550, 578,  550, 572,  550, 1692,  546, 1696,  548, 572,  548, 580,  550, 572,  550, 1692,  548, 1700,  548, 1692,  548, 574,  548, 39780,  8942, 2262,  548};  // NEC 8877718E
uint16_t tvVolumeUp[71] = {8974, 4446,  582, 1660,  582, 568,  558, 566,  556, 564,  558, 1658,  582, 570,  556, 564,  558, 564,  558, 562,  558, 1660,  584, 1658,  584, 1660,  584, 568,  558, 1658,  582, 1660,  584, 1662,  576, 1662,  584, 564,  582, 550,  558, 564,  560, 562,  566, 556,  560, 1658,  586, 1656,  586, 564,  558, 1660,  586, 1656,  584, 1658,  584, 1658,  584, 1656,  584, 566,  558, 574,  584, 39772,  8978, 2228,  584};  // NEC 8877837C
uint16_t tvVolumeDown[71] = {8922, 4508,  552, 1692,  548, 572,  550, 572,  550, 570,  550, 1692,  552, 570,  552, 570,  552, 570,  550, 570,  552, 1692,  550, 1690,  550, 1692,  550, 570,  552, 1690,  550, 1694,  548, 1692,  548, 1692,  548, 572,  552, 578,  552, 1692,  548, 1692,  550, 574,  552, 570,  552, 1692,  550, 570,  552, 1692,  550, 1692,  548, 572,  550, 578,  552, 1692,  550, 1692,  548, 576,  552, 39826,  8944, 2202,  610};  // NEC 88779966
uint16_t lightTurnOn[71] = {9160, 4530,  566, 572,  568, 574,  566, 574,  568, 572,  568, 572,  568, 574,  568, 574,  566, 572,  568, 1680,  566, 1682,  566, 1680,  566, 1684,  562, 1680,  568, 1680,  568, 1680,  568, 1680,  566, 1680,  566, 1682,  566, 1682,  564, 574,  566, 574,  566, 574,  568, 572,  566, 574,  566, 574,  564, 576,  566, 572,  566, 1682,  566, 1680,  564, 1682,  566, 1678,  568, 1680,  566, 39972,  9138, 2260,  566};  // NEC FFE01F
uint16_t lightTurnOff[71] = {9198, 4528,  568, 572,  570, 574,  570, 572,  570, 572,  570, 574,  568, 574,  568, 574,  570, 574,  568, 1682,  568, 1684,  564, 1682,  570, 1678,  570, 1682,  568, 1680,  568, 1682,  566, 1684,  566, 574,  568, 1682,  566, 1682,  566, 574,  566, 574,  568, 574,  568, 572,  568, 572,  568, 1678,  570, 574,  566, 574,  566, 1680,  568, 1682,  566, 1682,  566, 1682,  566, 1682,  566, 39978,  9152, 2262,  566};  // NEC FF609F
uint16_t lightLess[71] = {9112, 4532,  558, 576,  562, 578,  560, 578,  560, 578,  560, 578,  560, 578,  562, 576,  562, 578,  560, 1708,  538, 1684,  560, 1684,  560, 1708,  536, 1686,  558, 1686,  558, 1686,  560, 1686,  560, 578,  560, 1684,  562, 578,  560, 578,  560, 576,  562, 576,  562, 576,  562, 576,  560, 1686,  558, 578,  562, 1684,  560, 1684,  562, 1684,  558, 1686,  560, 1686,  558, 1686,  558, 39986,  9102, 2268,  558};  // NEC FF40BF
uint16_t lightMore[71] = {9134, 4526,  566, 574,  566, 574,  566, 572,  566, 574,  566, 572,  568, 572,  568, 572,  568, 574,  566, 1682,  566, 1680,  568, 1680,  564, 1682,  566, 1678,  568, 1680,  566, 1680,  568, 1680,  566, 572,  566, 574,  566, 574,  566, 572,  566, 574,  566, 572,  566, 574,  566, 574,  566, 1682,  564, 1682,  566, 1680,  566, 1682,  564, 1680,  566, 1680,  566, 1680,  566, 1680,  566, 39980,  9126, 2262,  564};  // NEC FF00FF
uint16_t lightWhite[71] = {9130, 4530,  564, 574,  566, 574,  566, 574,  564, 574,  566, 574,  566, 574,  566, 574,  564, 574,  566, 1682,  564, 1682,  564, 1682,  564, 1682,  564, 1682,  564, 1686,  562, 1682,  564, 1682,  564, 1682,  564, 1682,  564, 574,  564, 576,  566, 574,  564, 574,  564, 576,  564, 576,  564, 574,  566, 574,  564, 1682,  564, 1680,  566, 1682,  564, 1682,  564, 1680,  566, 1684,  562, 39980,  9134, 2260,  566};  // NEC FFC03F
uint16_t lightBlue[71] = {9134, 4528,  566, 574,  566, 574,  564, 574,  564, 574,  564, 574,  566, 574,  564, 574,  564, 574,  564, 1710,  536, 1682,  564, 1682,  564, 1684,  564, 1680,  564, 1682,  566, 1682,  562, 1682,  564, 574,  566, 1680,  564, 574,  566, 1682,  564, 574,  564, 574,  564, 574,  564, 576,  564, 1684,  562, 576,  564, 1682,  564, 574,  564, 1680,  564, 1684,  562, 1682,  564, 1682,  562, 39984,  9114, 2262,  564};  // NEC FF50AF
uint16_t lightGreen[71] = {9124, 4530,  564, 574,  566, 574,  564, 574,  564, 576,  564, 576,  564, 574,  564, 574,  564, 574,  564, 1684,  562, 1684,  564, 1682,  564, 1682,  566, 1684,  562, 1682,  564, 1682,  564, 1682,  566, 1682,  566, 574,  564, 576,  566, 1684,  562, 574,  564, 574,  566, 574,  566, 574,  566, 572,  566, 1682,  564, 1682,  566, 574,  566, 1682,  564, 1682,  566, 1682,  564, 1682,  566, 39888,  9232, 2262,  564};  // NEC FF906F
uint16_t lightRed[71] = {9130, 4528,  564, 574,  564, 574,  566, 574,  564, 574,  564, 574,  564, 574,  566, 574,  566, 574,  564, 1682,  564, 1682,  564, 1680,  564, 1680,  566, 1680,  564, 1682,  564, 1682,  564, 1682,  564, 574,  564, 574,  566, 574,  566, 1680,  564, 574,  564, 574,  564, 574,  564, 574,  564, 1680,  566, 1682,  564, 1682,  562, 574,  564, 1682,  564, 1682,  562, 1682,  564, 1682,  564, 39982,  9108, 2264,  562};  // NEC FF10EF


IRsend irSendBack(D3);
IRsend irSendFront(D4);
IRsend irSendLeft(D5);
IRsend irSendRight(D6);

bool isTVSource = true;


void setup() 
{
  Serial.begin(115200);
  Serial.println("Initializing esp8266.....");

  // Setup Blynk 
  Blynk.begin(BLYNK_AUTH, WIFI_NAME, WIFI_PASSWORD);


  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to network: ");
  Serial.println(WIFI_NAME);
 
  WiFi.begin(WIFI_NAME, WIFI_PASSWORD);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");

  // Setup IRSend
  irSendBack.begin();
  irSendFront.begin();
  irSendLeft.begin();
  irSendRight.begin();
}


void loop() {
  Blynk.run();
}


// Blynk read AC button ON/OFF
BLYNK_WRITE(V8)
{
  int buttonState = param.asInt();
  
  if (buttonState == 1) 
  {
    turnACPowerOn();
  } 
  else if (buttonState == 0) 
  {
    turnACPowerOFF();
  }
}


// Blynk read AC temp slider
BLYNK_WRITE(V9)
{
  int sliderValue = param.asInt();
  Serial.print(sliderValue);

  for (int i=0; i<30 - 16; i++) 
  {
    changeACTempDown();
    delay(300);
  }

  for (int i=0; i<sliderValue - 16; i++) 
  {
    changeACTempUp();
    delay(300);
  }
}


BLYNK_WRITE(V16)
{
  int value = param.asInt();

  switch(value)
  {
    // AC Controls
    case BLYNK_PARAM_VALUE_AC_POWER_ON:
    turnACPowerOn();
    break;
    
    case BLYNK_PARAM_VALUE_AC_POWER_OFF:
    turnACPowerOFF();
    break;
    
    case BLYNK_PARAM_VALUE_AC_TEMP_UP:
    changeACTempUp();
    break;
    
    case BLYNK_PARAM_VALUE_AC_TEMP_DOWN:
    changeACTempDown();
    break;
    
    // TV Setup
    case BLYNK_PARAM_VALUE_TV_POWER:
    changeTVPower();
    break;
    
    case BLYNK_PARAM_VALUE_TV_SOURCE:
    changeTVSource();
    break;
    
    case BLYNK_PARAM_VALUE_TV_VOLUME_UP:
    changeTVVolumeUp();
    break;
    
    case BLYNK_PARAM_VALUE_TV_VOLUME_DOWN:
    changeTVVolumeDown();
    break;
    
    // TV Programs
    case BLYNK_PARAM_VALUE_TV_BTV:
    changeTVChanelToBtv();
    break;
    
    case BLYNK_PARAM_VALUE_TV_NOVA:
    changeTVChanelToNova();
    break;
    
    case BLYNK_PARAM_VALUE_TV_CITY:
    changeTVChanelToCity();
    break;
    
    case BLYNK_PARAM_VALUE_TV_THE_VOICE:
    changeTVChanelToTheVoice();
    break;
    
    case BLYNK_PARAM_VALUE_TV_DISCOVERY:
    changeTVChanelToDiscovery();
    break;
    
    case BLYNK_PARAM_VALUE_TV_BTV_COMEDY:
    changeTVChanelToBtvComedy();
    break;
    
    case BLYNK_PARAM_VALUE_TV_NATIONAL_GEOGRAPHIC:
    changeTVChanelToNationalGeographic();
    break;


    case BLYNK_PARAM_VALUE_LIGHT_TURN_ON:
    turnOnLight();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_TURN_OFF:
    turnOffLight();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_LESS:
    setLessLight();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_MORE:
    setMoreLight();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_WHITE:
    changeLightToWhite();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_BLUE:
    changeLightToBlue();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_GREEN:
    changeLightToGreen();
    break;
    
    case BLYNK_PARAM_VALUE_LIGHT_RED:
    changeLightToRed();
    break;
  }
}

void turnACPowerOn() 
{
  sendIrSignalLeft(acPowerON, 231);
  Blynk.setProperty(V8, "color", "#00FF00");
  Blynk.virtualWrite(V8, HIGH);

  Serial.println("turnACPowerOn");
}

void turnACPowerOFF() 
{
  sendIrSignalLeft(acPowerOFF, 347);
  Blynk.setProperty(V8, "color", "#00FF00");
  Blynk.virtualWrite(V8, HIGH);

  Serial.println("turnACPowerOFF");
}

void changeACTempDown()
{
  sendIrSignalLeft(acTempDown, 231);

  Serial.println("changeACTempDown");
}

void changeACTempUp()
{
  sendIrSignalLeft(acTempUp, 231);

  Serial.println("changeACTempUp");
}


void changeTVPower()
{
  sendIrSignalBack(tvSwitchPower, 135);

  Serial.println("changeTVPower");
}


void changeTVSource()
{
  if (isTVSource)
  {
    switchTVSource(4);
  } 
  else 
  {
    switchTVSource(2);
  }

  isTVSource = !isTVSource;

  Serial.println("changeTVSource");
}

void switchTVSource(int times)
{
  for (int i=0; i<times; i++)
  {
    sendIrSignalBack(tvSwitchSource, 135);
    delay(500);
  }
}


void changeTVVolumeDown()
{
  sendIrSignalBack(tvVolumeDown, 71);

  Serial.println("changeTVVolumeDown");
}


void changeTVVolumeUp()
{
  sendIrSignalBack(tvVolumeUp, 71);

  Serial.println("changeTVVolumeUp");
}


void changeTVChanelToBtv()
{
  sendIrSignalBack(tvBTV, 71);

  Serial.println("changeTVChanelToBtv");
}


void changeTVChanelToNova()
{
  sendIrSignalBack(tvNova, 71);

  Serial.println("changeTVChanelToNova");
}


void changeTVChanelToCity()
{
  sendIrSignalBack(tvCity1, 71);
  delay(200);
  
  sendIrSignalBack(tvCity2, 71);
  delay(200);
  
  sendIrSignalBack(tvCity3, 71);
  delay(200);

  Serial.println("changeTVChanelToCity");
}


void changeTVChanelToTheVoice()
{
  sendIrSignalBack(tvTheVoice1, 71);
  delay(200);
  
  sendIrSignalBack(tvTheVoice2, 71);
  delay(200);
  
  sendIrSignalBack(tvTheVoice3, 71);
  delay(200);

  Serial.println("changeTVChanelToTheVoice");
}


void changeTVChanelToDiscovery()
{
  sendIrSignalBack(tvDiscovery1, 71);
  delay(200);
  
  sendIrSignalBack(tvDiscovery2, 67);
  delay(200);
  
  sendIrSignalBack(tvDiscovery3, 67);
  delay(200);

  Serial.println("changeTVChanelToDiscovery");
}


void changeTVChanelToBtvComedy()
{
  sendIrSignalBack(tvBTVComedy, 71);

  Serial.println("changeTVChanelToBtvComedy");
}


void changeTVChanelToNationalGeographic()
{
  sendIrSignalBack(tvNationalGeographic1, 71);
  delay(200);
  
  sendIrSignalBack(tvNationalGeographic2, 67);
  delay(200);
  
  sendIrSignalBack(tvNationalGeographic3, 71);
  delay(200);

  Serial.println("changeTVChanelToNationalGeographic");
}


void turnOnLight()
{
  sendIrSignalLeft(lightTurnOn, 71);
  sendIrSignalFront(lightTurnOn, 71);

  Serial.println("turnOnLight");
}


void turnOffLight()
{
  sendIrSignalLeft(lightTurnOff, 71);
  sendIrSignalFront(lightTurnOff, 71);

  Serial.println("turnOffLight");
}


void setLessLight()
{
  sendIrSignalLeft(lightLess, 71);
  sendIrSignalFront(lightLess, 71);

  Serial.println("setLessLight");
}


void setMoreLight()
{
  sendIrSignalLeft(lightMore, 71);
  sendIrSignalFront(lightMore, 71);

  Serial.println("setMoreLight");
}


void changeLightToWhite()
{
  sendIrSignalLeft(lightWhite, 71);
  sendIrSignalFront(lightWhite, 71);

  Serial.println("changeLightToWhite");
}


void changeLightToBlue()
{
  sendIrSignalLeft(lightBlue, 71);
  sendIrSignalFront(lightBlue, 71);

  Serial.println("changeLightToBlue");
}


void changeLightToGreen()
{
  sendIrSignalLeft(lightGreen, 71);
  sendIrSignalFront(lightGreen, 71);

  Serial.println("changeLightToGreen");
}


void changeLightToRed()
{
  sendIrSignalLeft(lightRed, 71);
  sendIrSignalFront(lightRed, 71);

  Serial.println("changeLightToRed");
}


void sendIrSignalBack(uint16_t *irSignal, int sizeOfSignal)
{
  irSendBack.sendRaw(irSignal, sizeOfSignal, 38);
}

void sendIrSignalFront(uint16_t *irSignal, int sizeOfSignal)
{
  irSendFront.sendRaw(irSignal, sizeOfSignal, 38);
}

void sendIrSignalLeft(uint16_t *irSignal, int sizeOfSignal)
{
  irSendLeft.sendRaw(irSignal, sizeOfSignal, 38);
}

void sendIrSignalRight(uint16_t *irSignal, int sizeOfSignal)
{
  irSendRight.sendRaw(irSignal, sizeOfSignal, 38);
}
